# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")

package(default_visibility = ["//src/core/async_executor:__subpackages__"])

cc_library(
    name = "async_executor",
    srcs = ["async_executor.cc"],
    hdrs = ["async_executor.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":single_thread_async_executor",
        ":single_thread_priority_async_executor",
        "//src/core/interface",
        "//src/core/interface:async_context",
        "//src/core/test",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/random",
        "@com_google_absl//absl/synchronization",
    ],
)

cc_library(
    name = "typedef",
    hdrs = ["typedef.h"],
)

cc_library(
    name = "error_codes",
    hdrs = ["error_codes.h"],
    deps = [
        "//src/core/interface:errors",
    ],
)

cc_library(
    name = "async_executor_utils",
    hdrs = ["async_executor_utils.h"],
    deps = [
        ":error_codes",
        "//src/core/common/global_logger",
    ],
)

cc_library(
    name = "async_task",
    hdrs = ["async_task.h"],
    deps = [
        "//src/core/interface",
        "@com_google_absl//absl/synchronization",
    ],
)

cc_library(
    name = "single_thread_async_executor",
    srcs = ["single_thread_async_executor.cc"],
    hdrs = ["single_thread_async_executor.h"],
    deps = [
        ":async_executor_utils",
        ":async_task",
        ":typedef",
        "//src/core/common/concurrent_queue",
        "//src/public/core/interface:execution_result",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
    ],
)

cc_library(
    name = "single_thread_priority_async_executor",
    srcs = ["single_thread_priority_async_executor.cc"],
    hdrs = ["single_thread_priority_async_executor.h"],
    deps = [
        ":async_executor_utils",
        ":async_task",
        ":typedef",
        "//src/core/interface",
        "//src/public/core/interface:execution_result",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
    ],
)

cc_test(
    name = "async_executor_test",
    size = "small",
    srcs = ["async_executor_test.cc"],
    deps = [
        ":async_executor",
        ":error_codes",
        ":typedef",
        "//src/core/async_executor/mock:core_async_executor_mock",
        "//src/core/interface",
        "//src/core/test/utils",
        "//src/public/core:test_execution_result_matchers",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/synchronization",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "single_thread_async_executor_test",
    size = "small",
    srcs = ["single_thread_async_executor_test.cc"],
    deps = [
        ":error_codes",
        ":single_thread_async_executor",
        ":typedef",
        "//src/core/async_executor/mock:core_async_executor_mock",
        "//src/core/interface",
        "//src/public/core:test_execution_result_matchers",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "single_thread_priority_async_executor_test",
    size = "small",
    srcs = ["single_thread_priority_async_executor_test.cc"],
    flaky = True,
    deps = [
        ":error_codes",
        ":single_thread_priority_async_executor",
        ":typedef",
        "//src/core/async_executor/mock:core_async_executor_mock",
        "//src/core/interface",
        "//src/core/test/utils",
        "//src/public/core:test_execution_result_matchers",
        "@com_google_absl//absl/synchronization",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "async_executor_benchmark_tests",
    size = "small",
    srcs = [
        "single_thread_async_executor_benchmark_test.cc",
    ],
    deps = [
        ":single_thread_priority_async_executor",
        "//src/core/async_executor/mock:core_async_executor_mock",
        "//src/core/interface",
        "//src/core/test/utils",
        "//src/public/core:test_execution_result_matchers",
        "//src/public/core/interface:execution_result",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "async_task_test",
    size = "small",
    srcs = ["async_task_test.cc"],
    deps = [
        ":async_task",
        "//src/core/async_executor/mock:core_async_executor_mock",
        "//src/core/interface",
        "//src/core/test/utils",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "async_executor_utils_test",
    size = "small",
    srcs = ["async_executor_utils_test.cc"],
    deps = [
        ":async_executor_utils",
        "//src/public/core:test_execution_result_matchers",
        "@com_google_googletest//:gtest_main",
    ],
)
