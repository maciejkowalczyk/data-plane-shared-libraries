# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@rules_buf//buf:defs.bzl", "buf_lint_test")
load("@rules_cc//cc:defs.bzl", "cc_library", "cc_proto_library", "cc_test")
load("@rules_proto//proto:defs.bzl", "proto_library")

proto_library(
    name = "logger_proto",
    srcs = ["logger.proto"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_googleapis//google/api:annotations_proto",
        "@com_google_protobuf//:any_proto",
        "@com_google_protobuf//:struct_proto",
    ],
)

buf_lint_test(
    name = "logger_proto_lint",
    size = "small",
    config = "//src:buf.yaml",
    targets = [":logger_proto"],
)

cc_proto_library(
    name = "logger_cc_proto",
    deps = [":logger_proto"],
)

cc_library(
    name = "request_context_logger_non_prod",
    srcs = ["request_context_logger.cc"],
    hdrs = ["request_context_logger.h"],
    defines = ["PS_LOG_NON_PROD=1"],
    deps = [
        "@com_google_absl//absl/log:absl_log",
    ],
)

cc_library(
    name = "request_context_logger_prod",
    srcs = ["request_context_logger.cc"],
    hdrs = ["request_context_logger.h"],
    deps = [
        "@com_google_absl//absl/log:absl_log",
    ],
)

alias(
    name = "request_context_logger",
    actual = select({
        "//:non_prod_build": ":request_context_logger_non_prod",
        "//conditions:default": ":request_context_logger_prod",
    }),
    visibility = ["//visibility:public"],
)

[
    cc_test(
        name = "request_context_logger_{}_test".format(flavor),
        timeout = "short",
        srcs = [
            "request_context_logger_test.h",
            "request_context_logger_{}_test.cc".format(flavor),
        ],
        deps = [
            ":request_context_logger_{}".format(flavor),
            "@com_google_absl//absl/functional:any_invocable",
            "@com_google_absl//absl/log:check",
            "@com_google_absl//absl/strings",
            "@com_google_googletest//:gtest_main",
        ],
    )
    for flavor in ("non_prod", "prod")
]

[
    cc_test(
        name = "request_context_logger_force_otel_{}_test".format(flavor),
        timeout = "short",
        srcs = [
            "request_context_logger_test.h",
            "request_context_logger_force_otel_{}_test.cc".format(flavor),
        ],
        deps = [
            ":request_context_logger_{}".format(flavor),
            "@com_google_absl//absl/functional:any_invocable",
            "@com_google_absl//absl/log:check",
            "@com_google_absl//absl/strings",
            "@com_google_googletest//:gtest_main",
        ],
    )
    for flavor in ("non_prod", "prod")
]

[
    cc_library(
        name = "request_context_impl_{}".format(flavor),
        srcs = [
            "request_context_impl.cc",
            "request_context_impl_{}.cc".format(flavor),
        ],
        hdrs = ["request_context_impl.h"],
        deps = [
            ":logger_cc_proto",
            ":request_context_logger_{}".format(flavor),
            "//src/communication:json_utils",
            "//src/util/status_macro:source_location",
            "@com_google_absl//absl/base:no_destructor",
            "@com_google_absl//absl/functional:any_invocable",
            "@com_google_absl//absl/log:check",
            "@com_google_absl//absl/log:globals",
            "@com_google_absl//absl/log:initialize",
            "@io_opentelemetry_cpp//api",
        ],
    )
    for flavor in ("non_prod", "prod")
]

alias(
    name = "request_context_impl",
    actual = select({
        "//:non_prod_build": ":request_context_impl_non_prod",
        "//conditions:default": ":request_context_impl_prod",
    }),
    visibility = ["//visibility:public"],
)

[
    cc_test(
        name = "request_context_impl_{}_test".format(flavor),
        timeout = "short",
        srcs = [
            "request_context_impl_test.h",
            "request_context_logger_test.h",
            "request_context_impl_{}_test.cc".format(flavor),
        ],
        deps = [
            ":request_context_impl_{}".format(flavor),
            "//src/core/test/utils",
            "//src/util:protoutil",
            "@com_google_absl//absl/functional:any_invocable",
            "@com_google_absl//absl/strings",
            "@com_google_googletest//:gtest_main",
            "@io_opentelemetry_cpp//exporters/ostream:ostream_log_record_exporter",
        ],
    )
    for flavor in ("non_prod", "prod")
]

cc_test(
    name = "request_context_impl_die_test",
    timeout = "short",
    srcs = ["request_context_impl_die_test.cc"],
    deps = [
        ":request_context_impl",
        "@com_google_googletest//:gtest_main",
    ],
)
