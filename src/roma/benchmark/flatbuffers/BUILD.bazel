# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@aspect_rules_esbuild//esbuild:defs.bzl", "esbuild")
load("@bazel_skylib//rules:run_binary.bzl", "run_binary")
load("@com_github_google_flatbuffers//:build_defs.bzl", "flatbuffer_cc_library")
load("@com_github_google_flatbuffers//:typescript.bzl", "flatbuffer_ts_library")
load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library")

flatbuffer_cc_library(
    name = "data_structures_cc_fbs",
    srcs = ["data_structures.fbs"],
    # https://flatbuffers.dev/flatbuffers_guide_using_schema_compiler.html
    flatc_args = [
        "--cpp-std c++17",
        "--gen-object-api",
        "--gen-compare",
    ],
)

flatbuffer_ts_library(
    name = "data_structures_js_fbs",
    srcs = ["data_structures.fbs"],
)

esbuild(
    name = "text_decoder_bundle",
    srcs = [
        "//:node_modules/text-decoding",
    ],
    bundle = True,
    entry_points = ["text_decoder.js"],
    format = "esm",
    target = "esnext",
)

esbuild(
    name = "data_structures_js_app",
    srcs = [
        "data_structures.js",
        ":data_structures_js_fbs",
        "//:node_modules/flatbuffers",
    ],
    bundle = True,
    entry_points = ["data_structures.js"],
    format = "esm",
    target = "esnext",
)

genrule(
    name = "arraybuffer_flatbuffer_js_h",
    srcs = [
        ":data_structures_js_app",
    ],
    outs = ["arraybuffer_flatbuffer_js.h"],
    cmd = """
{
  cat <<EOF
#ifndef ROMA_BENCHMARK_FLATBUFFERS_DATA_STRUCTURES_JS_H_
#define ROMA_BENCHMARK_FLATBUFFERS_DATA_STRUCTURES_JS_H_

#include <string_view>

inline constexpr std::string_view kFlatbufferJs = R"JS_CODE(
EOF
  cat $(location :data_structures_js_app)/data_structures.js
  cat <<EOF
)JS_CODE";
#endif  // ROMA_BENCHMARK_FLATBUFFERS_DATA_STRUCTURES_JS_H_
EOF
} >$@""",
)

cc_library(
    name = "arraybuffer_flatbuffer_js_lib",
    hdrs = [":arraybuffer_flatbuffer_js.h"],
    visibility = ["//visibility:public"],
)

cc_binary(
    name = "generate_flatbuffers_kvstruct",
    srcs = ["generate_flatbuffers_kvstruct.cc"],
    deps = [
        ":data_structures_cc_fbs",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
    ],
)

kvdata_entries = [
    (
        num_entries,
        "false" if generate_js == "true" and num_entries > 100000 else generate_js,
        data_layout,
        "{}_{}_{}{}".format(
            data_layout.lower(),
            fname_middle,
            num_abbrev,
            fname_ext,
        ),
    )
    for num_entries, num_abbrev in (
        (1000, "1K"),
        (10000, "10K"),
        (100000, "100K"),
        (1000000, "1M"),
        (5000000, "5M"),
        (10000000, "10M"),
    )
    for data_layout in (
        "KVStrData",
        "KVKeyData",
        "KVDataParallel",
    )
    for generate_js, fname_middle, fname_ext in [
        ("true", "benchmark", ".js"),
        ("false", "fbs", ".fbs"),
    ]
]

[
    run_binary(
        name = fname.replace(".", "_"),
        outs = [fname],
        args = [
            "--num_entries={}".format(num_entries),
            "--generate_js={}".format(generate_js),
            "--output_file=$(location {})".format(fname),
            "--data_layout={}".format(data_layout),
        ],
        tool = ":generate_flatbuffers_kvstruct",
    )
    for num_entries, generate_js, data_layout, fname in kvdata_entries
]

filegroup(
    name = "kvdata",
    srcs = [":{}".format(fname) for _, generate_js, _, fname in kvdata_entries if generate_js == "false"],
    visibility = ["//visibility:public"],
)

[
    genrule(
        name = fname.replace("_benchmark_", "_benchmark_udf_").replace(".", "_"),
        srcs = [
            ":text_decoder_bundle",
            ":data_structures_js_app",
            ":kvdata_benchmark.js",
            ":{}".format(fname),
        ],
        outs = [fname.replace("_benchmark_", "_benchmark_udf_")],
        cmd = """
{
  cat $(location :text_decoder_bundle)/text_decoder.js
  printf "var TextDecoder = require_TextDecoder();\n"
  cat $(location :data_structures_js_app)/data_structures.js
  sed -e '/^  const fbs_data_b64 = /r $(location :""" + fname + """)' -e '/^  const fbs_data_b64 = /d' $(location :kvdata_benchmark.js)
} >$@""",
    )
    for num_entries, generate_js, data_layout, fname in kvdata_entries
    if generate_js == "true"
]

filegroup(
    name = "kvdata_js",
    srcs = [
        ":{}".format(fname.replace("_benchmark_", "_benchmark_udf_"))
        for num_entries, generate_js, _, fname in kvdata_entries
        if generate_js == "true"
    ],
)
