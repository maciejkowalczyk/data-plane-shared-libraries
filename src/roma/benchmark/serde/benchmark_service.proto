// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package privacy_sandbox.benchmark;

import "apis/privacysandbox/apis/roma/app_api/v1/options.proto";

// For faster allocations of sub-messages.
option cc_enable_arenas = true;

service BenchmarkService {
  option (privacysandbox.apis.roma.app_api.v1.roma_svc_annotation) = {
    name: 'Benchmark',
    code_id: "app_api_roma_app_benchmark_v1",
    description: 'Benchmark',
    cpp_namespace: 'privacy_sandbox::benchmark',
    roma_app_name: 'BenchmarkServer',
  };

  rpc Benchmark(BenchmarkRequest) returns (BenchmarkResponse) {
    option (privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation) = {
      description: 'BenchmarkAnnotation'
    };
  };
}

message NestedData {
  int32 count = 1;
  repeated float values = 2;
  optional NestedData sub_data = 3;
}

// Complex proto to use for benchmarks
message BenchmarkRequest {
  string id = 1;
  repeated string tags = 3;

  repeated NestedData nested_objects = 4;

  bytes binary_data = 5;
  // map<string, string> metadata = 6;
  oneof data_type {
    string text_data = 7;
    int32 number_data = 8;
  }
}

message BenchmarkResponse {
  string output = 1;
}
