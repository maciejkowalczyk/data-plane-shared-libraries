/**
 * This file is @generated by
 * src/roma/tools/api_plugin/tmpl/v8/app/cpp_test_romav8.tmpl. Do not edit.
 * Version: {{getVersion}}
 * Code Generator: {{getRomaGenerator}}
*/

/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{{range $file := .Files}}
{{$proto_basename := base $file.Name | trimSuffix (ext $file.Name)}}

#include "{{$proto_basename}}_romav8_app_service.h"

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include "absl/time/time.h"

namespace {
constexpr std::string_view kCodeVersion = "v1";
}

{{range $svc := .Services}}
{{$svcopts := index $svc.Options "privacysandbox.apis.roma.app_api.v1.roma_svc_annotation"}}
{{$svcName := printf "V8%s" $svc.Name -}}

namespace {{$svcopts.CppNamespace}}::test {

namespace {
  const absl::Duration kDefaultTimeout = absl::Seconds(10);
}

{{- range $i, $rpc := .MethodsWithOption "privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation"}}
  {{- $reqType := $rpc.RequestFullType | replace "." "::" | printf "::%s" }}
  {{- $respType := $rpc.ResponseFullType | replace "." "::" | printf "::%s" }}
  {{- $testName := printf "EncodeDecodeProtobuf_%d" $i}}
TEST(RomaV8App{{$svcName}}Test, {{$testName}}) {
  google::scp::roma::Config config;
  config.number_of_workers = 2;
  auto app_svc = {{$svcName}}<>::Create(std::move(config));

  constexpr std::string_view jscode = R"(
    {{$svcopts.RomaAppName}}.{{$rpc.Name}} = function(req) {
      return {};
    };
  )";
  absl::Notification register_finished;
  absl::Status register_status;
  ASSERT_TRUE(app_svc->Register(jscode, kCodeVersion, register_finished, register_status).ok());
  register_finished.WaitForNotificationWithTimeout(kDefaultTimeout);
  EXPECT_TRUE(register_status.ok());

  absl::Notification completed;
  {{$reqType}} req;

  absl::StatusOr<std::unique_ptr<{{$respType}}>> resp;
  ASSERT_TRUE(app_svc->{{$rpc.Name}}(completed, req, resp).ok());
  completed.WaitForNotificationWithTimeout(kDefaultTimeout);
}
{{end}}

}  // {{$svcopts.CppNamespace}}::test

{{end}}
{{end}}
