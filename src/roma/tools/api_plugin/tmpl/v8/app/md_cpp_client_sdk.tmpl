[//]: <> (This file is @generated by src/roma/tools/api_plugin/tmpl/v8/app/md_cpp_client_sdk.tmpl. Do not edit.)
[//]: <> (Version: {{getVersion}})
[//]: <> (Code Generator: {{getRomaGenerator}})

# Roma Application C++ Client SDK

## Table of Contents
{{- range $file := .Files}}
{{- $file_name := .Name -}}

- [{{$file.Name}}](#{{$file_name | anchor}})
{{- if $file.Services}}
{{range $svc := $file.Services}}
- [{{$svc.Name}}](#{{$svc.FullName | anchor}})
{{- end}}
{{- end}}
{{- if .Messages}}
{{- range $msg := .Messages}}
- [{{$msg.LongName}}](#{{$msg.FullName | anchor}})
{{- end}}
{{- end}}
{{- if .Enums}}
{{range $enum := .Enums}}
- [{{$enum.LongName}}](#{{$enum.FullName | anchor}})
{{- end}}
{{- end}}
{{- end}}

{{- range $file := .Files}}

# Services
{{- range $svc := $file.Services}}
{{- $svcopts := index $svc.Options "privacysandbox.apis.roma.app_api.v1.roma_svc_annotation"}}
<a name="{{$svc.FullName | anchor}}"></a>
## Service: {{$svcopts.RomaAppName}} (`{{$svc.FullName}}`)
`{{$svcopts.Description}}`

**Namespace:** {{$svcopts.CppNamespace}}

```c++
class {{$svc.Name}} : public google::scp::roma::romav8::app_api::RomaV8AppService<TMetadata> {
 public:
  using AppService = google::scp::roma::romav8::app_api::RomaV8AppService<TMetadata>;
  using Config = typename AppService::Config;

 public:
  static absl::StatusOr<{{$svc.Name}}<TMetadata>> Create(Config config);

  absl::Status Register(std::string_view jscode,
                        std::string_view code_version,
                        absl::Notification& notification,
                        absl::Status& notify_status);

  void Cancel(const google::scp::roma::ExecutionToken& token);

{{- range $rpc := .MethodsWithOption "privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation"}}
  {{- $reqType := $rpc.RequestFullType | replace "." "::" | printf "::%s" }}
  {{- $respType := $rpc.ResponseFullType | replace "." "::" | printf "::%s" }}
  /*
   * {{$rpc.Name}}
   * {{- $rpc.Description}}
   * request: {{$reqType}}
   * response: absl::StatusOr<std::unique_ptr<{{$respType}}>>
   */
  absl::StatusOr<google::scp::roma::ExecutionToken> {{$rpc.Name}}(
      absl::Notification& notification,
      const {{$reqType}}& request,
      absl::StatusOr<std::unique_ptr<{{$respType}}>>& response,
      TMetadata metadata = TMetadata());

  absl::StatusOr<google::scp::roma::ExecutionToken> {{$rpc.Name}}(
      absl::AnyInvocable<void(absl::StatusOr<{{$respType}}>)> callback,
      const {{$reqType}}& request,
      TMetadata metadata = TMetadata());
{{- end}}
```

{{range $rpc := $svc.MethodsWithOption "privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation"}}
{{- $reqFullType := $rpc.RequestFullType | printf "proto.%s" }}
{{- $reqType := $rpc.RequestType }}
{{- $respFullType := $rpc.ResponseFullType | printf "proto.%s" }}
{{- $respType := $rpc.ResponseType }}

### rpc: {{$svcopts.RomaAppName}}.{{$rpc.Name}}
{{- if $rpc.Description}}
{{$rpc.Description}}
{{- end}}

Request: `{{$reqFullType}}`

Response: `{{$respFullType}}`

{{end}}{{/*methods*/}}

| Method Name | Request Type | Response Type | Description |
| ----------- | ------------ | ------------- | ------------|
{{- range $rpc := $svc.Methods}}
| {{$rpc.Name}} | [{{$rpc.RequestLongType}}](#{{$rpc.RequestFullType | anchor}}){{if $rpc.RequestStreaming}} stream{{end}} | [{{$rpc.ResponseLongType}}](#{{$rpc.ResponseFullType | anchor}}){{if $rpc.ResponseStreaming}} stream{{end}} | {{nobr $rpc.Description}} |
{{- end}}

{{- end}}{{/*services*/}}

# Protobuf Messages
{{- range $msg := $file.Messages}}
<a name="{{$msg.FullName | anchor}}"></a>

## {{$msg.LongName}}
{{$msg.Description}}

{{- if $msg.HasFields}}
| Field | Type | Label | Description |
| ----- | ---- | ----- | ----------- |
{{- range $fld := $msg.Fields}}
| {{$fld.Name}} | [{{$fld.LongType}}](#{{$fld.FullType | anchor}}) | {{$fld.Label}} | {{if (index $fld.Options "deprecated"|default false)}}**Deprecated$fld.** {{end}}{{nobr $fld.Description}}{{if $fld.DefaultValue}} Default: {{$fld.DefaultValue}}{{end}} |
{{- end}}
{{- end}}{{/*fields*/}}
{{- end}}{{/*messages*/}}

{{- range $enum := $file.Enums}}
<a name="{{$enum.FullName | anchor}}"></a>
## {{$enum.LongName}}
{{$enum.Description}}

| Name | Number | Description |
| ---- | ------ | ----------- |
{{- range $val := .Values}}
| {{$val.Name}} | {{$val.Number}} | {{nobr $val.Description}} |
{{- end}}

{{end}}{{/*enums*/}}
{{end}}{{/*files*/}}
