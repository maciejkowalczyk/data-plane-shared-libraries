/**
 * This file is @generated by
 * src/roma/tools/api_plugin/tmpl/v8/host/cpp_handle_native_request.tmpl. Do not edit.
 * Version: {{getVersion}}
 * Code Generator: {{getRomaGenerator}}
*/

/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{{range $file := .Files}}
{{- $svcGuard := "" }}
{{with index .Services 0}}
{{- $svcopts := index .Options "privacysandbox.apis.roma.app_api.v1.roma_svc_annotation"}}
{{- $svcGuard = $svcopts.RomaAppName | upper }}
{{end}}

{{- $defineGuard := $file.Package | printf "%s_%s_NATIVE_REQUEST_HANDLER" $svcGuard | replace "." "_" | upper}}
#ifndef {{$defineGuard}}
#define {{$defineGuard}}

#include <string_view>
#include <utility>

#include <grpcpp/grpcpp.h>

#include "src/util/status_macro/status_util.h"
#include "src/roma/config/function_binding_object_v2.h"
#include "src/roma/native_function_grpc_server/proto/callback_service.grpc.pb.h"
#include "src/roma/native_function_grpc_server/proto/callback_service.pb.h"
#include "src/roma/native_function_grpc_server/interface.h"
#include "src/roma/roma_service/romav8_proto_utils.h"
{{range $svc := $file.Services}}
{{- $svcopts := index $svc.Options "privacysandbox.apis.roma.app_api.v1.roma_svc_annotation"}}
{{range $path := $svcopts.CppHostProcessCallbackIncludes}}
#include "{{$path}}"
{{- end -}}{{/*$svcopts.CppHostProcessCallbackIncludes range*/}}
{{- end -}}{{/*svc range*/}}
#include "{{$file.Name | trimSuffix (ext $file.Name)}}.pb.h"

using google::scp::roma::romav8::Decode;
using google::scp::roma::romav8::Encode;

{{range $svc := $file.Services}}
{{- $svcopts := index $svc.Options "privacysandbox.apis.roma.app_api.v1.roma_svc_annotation"}}
namespace {{$svcopts.CppNamespace}} {

{{- range $rpc := $svc.MethodsWithOption "privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation"}}
{{- $rpcopts := index $rpc.Options "privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation"}}
{{- $reqType := $rpc.RequestFullType | replace "." "::" | printf "::%s" }}
{{- if gt (len $svcopts.CppHostProcessCallbackIncludes) 0}}

template <typename TMetadata>
void {{$rpc.Name}}FunctionBinding(google::scp::roma::FunctionBindingPayload<TMetadata>& wrapper) {
  {{$reqType}} request;
  CHECK_OK(Decode(wrapper.io_proto.input_string(), request));
  auto [response_payload, status] = {{$rpcopts.CppHostProcessCallback}}(wrapper.metadata, request);
  CHECK_OK(status);
  wrapper.io_proto.set_output_string(*Encode(response_payload));
}

template <typename TMetadata>
class {{$rpc.Name}}Handler
    : public google::scp::roma::grpc_server::RequestHandlerBase<
          privacy_sandbox::server_common::InvokeCallbackRequest,
          privacy_sandbox::server_common::InvokeCallbackResponse,
          privacy_sandbox::server_common::JSCallbackService::AsyncService> {
 public:
  void Request(TService* service, grpc::ServerContext* ctx,
               grpc::ServerAsyncResponseWriter<TResponse>* responder,
               grpc::ServerCompletionQueue* cq, void* tag) {
    service->RequestInvokeCallback(ctx, &request_, responder, cq, cq, tag);
  }

  std::pair<TResponse*, grpc::Status> ProcessRequest(const TMetadata& metadata) {
    {{$reqType}} request;
    CHECK_OK(Decode(request_.request_payload(), request));
    auto [response_payload, status] = {{$rpcopts.CppHostProcessCallback}}(metadata, request);
    *response_.mutable_response_payload() = std::move(*Encode(response_payload));
    return std::make_pair(&response_, privacy_sandbox::server_common::FromAbslStatus(status));
  }

 private:
  TRequest request_;
  TResponse response_;
};
{{- end -}}{{/*if $svcopts.CppHostProcessCallbackIncludes*/}}
{{- end -}}{{/*rpc range*/}}

}  // namespace {{$svcopts.CppNamespace}}
{{- end -}}{{/*svc range*/}}

#endif  // {{$defineGuard}}
{{- end -}}{{/*file range*/}}
