#!/bin/bash

set -o errexit

declare -i PLAINTEXT=0

function usage() {
  local -r -i exitval=$1
  cat &>/dev/stderr <<USAGE
usage:
  $0 <options>
    --endpoint-hostport <host:port> host:port string
    --docker-network <name>         docker network
    --protoset <filename>           protobuf spec image file
    --rpc <rpc name>                rpc name
    --request <filename>            request.json filename
    --plaintext                     send plaintext request
environment variables:
    TEST_TOOLS_IMAGE                docker image uri for test tools
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --endpoint-hostport)
      ENDPOINT_HOSTPORT="$2"
      shift 2
      ;;
    --docker-network)
      DOCKER_NETWORK="$2"
      shift 2
      ;;
    --rpc)
      RPC="$2"
      shift 2
      ;;
    --protoset)
      PROTOSET_FILENAME="$2"
      shift 2
      ;;
    --request)
      REQUEST_FILENAME="$2"
      shift 2
      ;;
    --plaintext)
      PLAINTEXT=1
      shift
      ;;
    --help | -h) usage 0 ;;
    *) shift 2 ;;
  esac
done

: "${RPC?"Error: --rpc must be specified"}"
: "${REQUEST_FILENAME?"Error: --request must be specified"}"
: "${ENDPOINT_HOSTPORT?"Error: --endpoint-hostport not specified"}"
: "${PROTOSET_FILENAME?"Error: --protoset not specified"}"
: "${TEST_TOOLS_IMAGE?"Error: Test tools image URI not specified in TEST_TOOLS_IMAGE env var"}"

if [[ -z "${TEST_DATA_SOURCE}" ]]; then
  TEST_DATA_SOURCE="$(docker volume create)"
  export TEST_DATA_SOURCE
  readonly TEST_DATA_SOURCE
fi
if [[ -z "${TEST_DATA_TARGET}" ]]; then
  TEST_DATA_TARGET="/data"
  export TEST_DATA_TARGET
  readonly TEST_DATA_TARGET
fi

declare -a DOCKER_ARGS=(
  "--rm"
  "--interactive"
  "--entrypoint=/bin/bash"
  "--tmpfs=/work"
  "--workdir=/work"
  "--mount=type=volume,source=${TEST_DATA_SOURCE},target=${TEST_DATA_TARGET}"
)
if [[ -n ${DOCKER_NETWORK} ]]; then
  DOCKER_ARGS+=("--network=${DOCKER_NETWORK}")
fi

declare -a GRPCURL_ARGS=()
if [[ ${PLAINTEXT} -eq 1 ]]; then
  GRPCURL_ARGS+=("-plaintext")
fi

GRPCURL_ERROR_TMPFILE="$(mktemp)"
readonly GRPCURL_ERROR_TMPFILE

set -o xtrace
if ! docker run "${DOCKER_ARGS[@]}" "${TEST_TOOLS_IMAGE}" -c "
grpcurl ${GRPCURL_ARGS[*]} -d @ -protoset '${TEST_DATA_TARGET}/protoset.pb' ${ENDPOINT_HOSTPORT} ${RPC} <'${TEST_DATA_TARGET}/req.json'
" 2> "${GRPCURL_ERROR_TMPFILE}"; then
  cat "${GRPCURL_ERROR_TMPFILE}"
fi
