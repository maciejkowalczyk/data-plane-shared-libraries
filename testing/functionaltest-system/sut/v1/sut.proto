// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package sut.v1;

option go_package = "github.com/privacysandbox/functionaltest-system/sut/v1/pb";

// TestRunner is the top-level configuration structure for the SUT test runner. It describes the dependencies as well as the workflow of the tests to be executed.
message TestRunner {
  // unique identifier for this SUT.
  string name = 1;

  // the deployment for this SUT
  Deploy deploy = 2;

  // the steps of the workflow
  repeated Stage stages = 3;

  // environment variables set across all stages
  map<string, string> env = 4;
}

// Description of the deployment associated with an SUT.
message Deploy {
  // a docker compose v2
  DockerCompose compose = 1;
}

// Configuration for a Docker Compose v2 deployment.
message DockerCompose {
  // A Docker compose v2 yaml config filename
  string yaml_filename = 1;
  // A set of Docker compose v2 env filenames
  repeated string env_filenames = 2;

  // sut-relative path to docker image files, each of which are loaded into the
  // docker client using `docker load --input`
  repeated string docker_image_files = 3;
}

// Describes a workflow step.
message Stage {
  // identifier for the stage
  string label = 1;
  // the command to execute
  Command command = 2;
  // working directory for stage
  string workdir = 3;
}

// Describes a command to execute.
message Command {
  // command can be one of various types
  oneof command {
    // a bash command
    ShellCommand shell = 1;
    // a bazel command
    BazelTest bazel = 2;
  }
}

// Describes a bash command to execute.
message ShellCommand {
  // command is a single command to be executed, each arg specified as a separate string
  repeated string command = 1;

  // environment variables for just this one stage
  map<string, string> env = 2;
}

// Describes a bazel test command to execute.
message BazelTest {
  // bazel test targets, using standard bazel syntax including wildcards.
  repeated string test_targets = 1;

  //repeated string startup_args = 2;
  //repeated string command_args = 3;
}
